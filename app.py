from flask import Flask
from node.atom import login_required
from flask_session import Session


app = Flask("Nylas")


Session(app)




@app.route("/login")
def login():
    # log user in
    
    # Based on Oauth2 Options for Nylas
    
    # Usually returns a redirect 
    ...

@app.route("/oauth2callback")
def oauth2callback():
    # verify user session info or create new user to mongodb DB
    
    # Handle Nylas Sessions
    
    ...
    
@app.route("/index_info", methods=["POST"])
@login_required
def index_info():
    # get the request args in json
    
    # get the ev_stations info and serialize to expected class
    
    # return a serialized info based on standard response JSON
    ...
    
@app.route("/book", methods=["POST"])
@login_required
def book():
    # get the args data in json
    
    # based on args create a reciept in json response with all stations and user booking related details
    
    # Add the booking info to users primary email calendar as an event based on standard event 
    # structure specify lat/long location  of the station as the location of event and other specific details
    
    # if toggled on initiate a special reminder using the nylas webhook 
    
    # Get the user an email with the earlier generated token
    
    # Update all info based on collections
    
    # return the token as json response to front end 
    ...
    

@app.route("/dashboard", methods=["POST"])
@login_required
def dashboard():
    
    # for user in session:  Return all info for user
    
    # include: Transactions, emails, booked stations , personal info we hold
    
    # would return a JSON response
    ...


@app.route("/logout", methods=["POST"])
@login_required
def logout():
    # remove user from session and clear Nylas session 
    
    # returns a json response with message
    ...

# These other routes are and may never be completed 
@app.route("/delete_transaction", methods=["POST"])
@login_required
def delete_transaction():
    #  ids to delete from args 
    
    # for each i transaction delete from db and return new transaction list
    
    # Would return a json response
    ...
    
@app.route("/flush", methods=["POST"])
@login_required
def delete_all_Nylas_activity():
    
    # Deletes all Calendar events generated by the site
    
    # This is possible since even events are stored in db (Ids)
    
    # emails and calendar options depends on args
    
    # would return a json response
    ...
    

    

